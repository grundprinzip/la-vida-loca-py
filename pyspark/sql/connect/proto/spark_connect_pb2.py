# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spark_connect.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x13spark_connect.proto\x1a\x19google/protobuf/any.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xb0\x17\n\x04Type\x12\x1d\n\x04\x62ool\x18\x01 \x01(\x0b\x32\r.Type.BooleanH\x00\x12\x16\n\x02i8\x18\x02 \x01(\x0b\x32\x08.Type.I8H\x00\x12\x18\n\x03i16\x18\x03 \x01(\x0b\x32\t.Type.I16H\x00\x12\x18\n\x03i32\x18\x05 \x01(\x0b\x32\t.Type.I32H\x00\x12\x18\n\x03i64\x18\x07 \x01(\x0b\x32\t.Type.I64H\x00\x12\x1a\n\x04\x66p32\x18\n \x01(\x0b\x32\n.Type.FP32H\x00\x12\x1a\n\x04\x66p64\x18\x0b \x01(\x0b\x32\n.Type.FP64H\x00\x12\x1e\n\x06string\x18\x0c \x01(\x0b\x32\x0c.Type.StringH\x00\x12\x1e\n\x06\x62inary\x18\r \x01(\x0b\x32\x0c.Type.BinaryH\x00\x12$\n\ttimestamp\x18\x0e \x01(\x0b\x32\x0f.Type.TimestampH\x00\x12\x1a\n\x04\x64\x61te\x18\x10 \x01(\x0b\x32\n.Type.DateH\x00\x12\x1a\n\x04time\x18\x11 \x01(\x0b\x32\n.Type.TimeH\x00\x12+\n\rinterval_year\x18\x13 \x01(\x0b\x32\x12.Type.IntervalYearH\x00\x12)\n\x0cinterval_day\x18\x14 \x01(\x0b\x32\x11.Type.IntervalDayH\x00\x12)\n\x0ctimestamp_tz\x18\x1d \x01(\x0b\x32\x11.Type.TimestampTZH\x00\x12\x1a\n\x04uuid\x18  \x01(\x0b\x32\n.Type.UUIDH\x00\x12%\n\nfixed_char\x18\x15 \x01(\x0b\x32\x0f.Type.FixedCharH\x00\x12 \n\x07varchar\x18\x16 \x01(\x0b\x32\r.Type.VarCharH\x00\x12)\n\x0c\x66ixed_binary\x18\x17 \x01(\x0b\x32\x11.Type.FixedBinaryH\x00\x12 \n\x07\x64\x65\x63imal\x18\x18 \x01(\x0b\x32\r.Type.DecimalH\x00\x12\x1e\n\x06struct\x18\x19 \x01(\x0b\x32\x0c.Type.StructH\x00\x12\x1a\n\x04list\x18\x1b \x01(\x0b\x32\n.Type.ListH\x00\x12\x18\n\x03map\x18\x1c \x01(\x0b\x32\t.Type.MapH\x00\x12%\n\x1buser_defined_type_reference\x18\x1f \x01(\rH\x00\x1aS\n\x07\x42oolean\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aN\n\x02I8\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aO\n\x03I16\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aO\n\x03I32\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aO\n\x03I64\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aP\n\x04\x46P32\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aP\n\x04\x46P64\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aR\n\x06String\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aR\n\x06\x42inary\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aU\n\tTimestamp\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aP\n\x04\x44\x61te\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aP\n\x04Time\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aW\n\x0bTimestampTZ\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aX\n\x0cIntervalYear\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aW\n\x0bIntervalDay\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1aP\n\x04UUID\x12 \n\x18type_variation_reference\x18\x01 \x01(\r\x12&\n\x0bnullability\x18\x02 \x01(\x0e\x32\x11.Type.Nullability\x1a\x65\n\tFixedChar\x12\x0e\n\x06length\x18\x01 \x01(\x05\x12 \n\x18type_variation_reference\x18\x02 \x01(\r\x12&\n\x0bnullability\x18\x03 \x01(\x0e\x32\x11.Type.Nullability\x1a\x63\n\x07VarChar\x12\x0e\n\x06length\x18\x01 \x01(\x05\x12 \n\x18type_variation_reference\x18\x02 \x01(\r\x12&\n\x0bnullability\x18\x03 \x01(\x0e\x32\x11.Type.Nullability\x1ag\n\x0b\x46ixedBinary\x12\x0e\n\x06length\x18\x01 \x01(\x05\x12 \n\x18type_variation_reference\x18\x02 \x01(\r\x12&\n\x0bnullability\x18\x03 \x01(\x0e\x32\x11.Type.Nullability\x1au\n\x07\x44\x65\x63imal\x12\r\n\x05scale\x18\x01 \x01(\x05\x12\x11\n\tprecision\x18\x02 \x01(\x05\x12 \n\x18type_variation_reference\x18\x03 \x01(\r\x12&\n\x0bnullability\x18\x04 \x01(\x0e\x32\x11.Type.Nullability\x1ah\n\x06Struct\x12\x14\n\x05types\x18\x01 \x03(\x0b\x32\x05.Type\x12 \n\x18type_variation_reference\x18\x02 \x01(\r\x12&\n\x0bnullability\x18\x03 \x01(\x0e\x32\x11.Type.Nullability\x1a\x65\n\x04List\x12\x13\n\x04type\x18\x01 \x01(\x0b\x32\x05.Type\x12 \n\x18type_variation_reference\x18\x02 \x01(\r\x12&\n\x0bnullability\x18\x03 \x01(\x0e\x32\x11.Type.Nullability\x1ay\n\x03Map\x12\x12\n\x03key\x18\x01 \x01(\x0b\x32\x05.Type\x12\x14\n\x05value\x18\x02 \x01(\x0b\x32\x05.Type\x12 \n\x18type_variation_reference\x18\x03 \x01(\r\x12&\n\x0bnullability\x18\x04 \x01(\x0e\x32\x11.Type.Nullability\"^\n\x0bNullability\x12\x1b\n\x17NULLABILITY_UNSPECIFIED\x10\x00\x12\x18\n\x14NULLABILITY_NULLABLE\x10\x01\x12\x18\n\x14NULLABILITY_REQUIRED\x10\x02\x42\x06\n\x04kind\"I\n\x04Plan\x12\x19\n\x04root\x18\x01 \x01(\x0b\x32\t.RelationH\x00\x12\x1b\n\x07\x63ommand\x18\x02 \x01(\x0b\x32\x08.CommandH\x00\x42\t\n\x07op_type\"K\n\x07\x43ommand\x12\x30\n\x0f\x63reate_function\x18\x01 \x01(\x0b\x32\x15.CreateScalarFunctionH\x00\x42\x0e\n\x0c\x63ommand_type\"\xc0\x02\n\x14\x43reateScalarFunction\x12\r\n\x05parts\x18\x01 \x03(\t\x12\x38\n\x08language\x18\x02 \x01(\x0e\x32&.CreateScalarFunction.FunctionLanguage\x12\x11\n\ttemporary\x18\x03 \x01(\x08\x12\x1d\n\x0e\x61rgument_types\x18\x04 \x03(\x0b\x32\x05.Type\x12\x1a\n\x0breturn_type\x18\x05 \x01(\x0b\x32\x05.Type\x12\x1d\n\x13serialized_function\x18\x06 \x01(\x0cH\x00\x12\x18\n\x0eliteral_string\x18\x07 \x01(\tH\x00\"A\n\x10\x46unctionLanguage\x12\r\n\tUNDEFINED\x10\x00\x12\x07\n\x03SQL\x10\x01\x12\n\n\x06PYTHON\x10\x02\x12\t\n\x05SCALA\x10\x03\x42\x15\n\x13\x66unction_definition\"\x9c\x02\n\x08Relation\x12\x1f\n\x06\x63ommon\x18\x01 \x01(\x0b\x32\x0f.RelationCommon\x12\x15\n\x04read\x18\x02 \x01(\x0b\x32\x05.ReadH\x00\x12\x1b\n\x07project\x18\x03 \x01(\x0b\x32\x08.ProjectH\x00\x12\x19\n\x06\x66ilter\x18\x04 \x01(\x0b\x32\x07.FilterH\x00\x12\x15\n\x04join\x18\x05 \x01(\x0b\x32\x05.JoinH\x00\x12\x17\n\x05union\x18\x06 \x01(\x0b\x32\x06.UnionH\x00\x12\x15\n\x04sort\x18\x07 \x01(\x0b\x32\x05.SortH\x00\x12\x17\n\x05\x66\x65tch\x18\x08 \x01(\x0b\x32\x06.FetchH\x00\x12\x1f\n\taggregate\x18\t \x01(\x0b\x32\n.AggregateH\x00\x12\x13\n\x03sql\x18\n \x01(\x0b\x32\x04.SqlH\x00\x42\n\n\x08rel_type\"4\n\x0eRelationCommon\x12\x13\n\x0bsource_info\x18\x01 \x01(\t\x12\r\n\x05\x61lias\x18\x02 \x01(\t\"\x14\n\x03Sql\x12\r\n\x05query\x18\x01 \x01(\t\"Y\n\x04Read\x12\'\n\x0bnamed_table\x18\x01 \x01(\x0b\x32\x10.Read.NamedTableH\x00\x1a\x1b\n\nNamedTable\x12\r\n\x05parts\x18\x01 \x03(\tB\x0b\n\tread_type\"E\n\x07Project\x12\x18\n\x05input\x18\x01 \x01(\x0b\x32\t.Relation\x12 \n\x0b\x65xpressions\x18\x03 \x03(\x0b\x32\x0b.Expression\"B\n\x06\x46ilter\x12\x18\n\x05input\x18\x01 \x01(\x0b\x32\t.Relation\x12\x1e\n\tcondition\x18\x02 \x01(\x0b\x32\x0b.Expression\"\xe7\x01\n\x04Join\x12\x17\n\x04left\x18\x01 \x01(\x0b\x32\t.Relation\x12\x18\n\x05right\x18\x02 \x01(\x0b\x32\t.Relation\x12\x17\n\x02on\x18\x03 \x01(\x0b\x32\x0b.Expression\x12\x1b\n\x03how\x18\x04 \x01(\x0e\x32\x0e.Join.JoinType\"v\n\x08JoinType\x12\x10\n\x0cJOIN_DEFAULT\x10\x00\x12\x0e\n\nJOIN_INNER\x10\x01\x12\x0e\n\nJOIN_OUTER\x10\x02\x12\x13\n\x0fJOIN_LEFT_OUTER\x10\x03\x12\x14\n\x10JOIN_RIGHT_OUTER\x10\x04\x12\r\n\tJOIN_ANTI\x10\x05\"x\n\x05Union\x12\x19\n\x06inputs\x18\x01 \x03(\x0b\x32\t.Relation\x12$\n\nunion_type\x18\x02 \x01(\x0e\x32\x10.Union.UnionType\".\n\tUnionType\x12\x12\n\x0eUNION_DISTINCT\x10\x00\x12\r\n\tUNION_ALL\x10\x01\"@\n\x05\x46\x65tch\x12\x18\n\x05input\x18\x01 \x01(\x0b\x32\t.Relation\x12\r\n\x05limit\x18\x02 \x01(\x05\x12\x0e\n\x06offset\x18\x03 \x01(\x05\"\xd0\x02\n\tAggregate\x12\x18\n\x05input\x18\x01 \x01(\x0b\x32\t.Relation\x12-\n\rgrouping_sets\x18\x02 \x03(\x0b\x32\x16.Aggregate.GroupingSet\x12$\n\x08measures\x18\x03 \x03(\x0b\x32\x12.Aggregate.Measure\x1a\x39\n\x0bGroupingSet\x12*\n\x15\x61ggregate_expressions\x18\x01 \x03(\x0b\x32\x0b.Expression\x1aV\n\x07Measure\x12.\n\x08\x66unction\x18\x01 \x01(\x0b\x32\x1c.Aggregate.AggregateFunction\x12\x1b\n\x06\x66ilter\x18\x02 \x01(\x0b\x32\x0b.Expression\x1a\x41\n\x11\x41ggregateFunction\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x1e\n\targuments\x18\x02 \x03(\x0b\x32\x0b.Expression\"\xa4\x02\n\x04Sort\x12\x18\n\x05input\x18\x01 \x01(\x0b\x32\t.Relation\x12$\n\x0bsort_fields\x18\x02 \x03(\x0b\x32\x0f.Sort.SortField\x1at\n\tSortField\x12\x1f\n\nexpression\x18\x01 \x01(\x0b\x32\x0b.Expression\x12&\n\tdirection\x18\x02 \x01(\x0e\x32\x13.Sort.SortDirection\x12\x1e\n\x05nulls\x18\x03 \x01(\x0e\x32\x0f.Sort.SortNulls\"8\n\rSortDirection\x12\x12\n\x0eSORT_ASCENDING\x10\x00\x12\x13\n\x0fSORT_DESCENDING\x10\x01\",\n\tSortNulls\x12\x0f\n\x0bNULLS_FIRST\x10\x00\x12\x0e\n\nNULLS_LAST\x10\x01\"\xa5\x0e\n\nExpression\x12&\n\x07literal\x18\x01 \x01(\x0b\x32\x13.Expression.LiteralH\x00\x12?\n\x14unresolved_attribute\x18\x02 \x01(\x0b\x32\x1f.Expression.UnresolvedAttributeH\x00\x12=\n\x13unresolved_function\x18\x03 \x01(\x0b\x32\x1e.Expression.UnresolvedFunctionH\x00\x12\x39\n\x11\x65xpression_string\x18\x04 \x01(\x0b\x32\x1c.Expression.ExpressionStringH\x00\x1a\x93\x0b\n\x07Literal\x12\x11\n\x07\x62oolean\x18\x01 \x01(\x08H\x00\x12\x0c\n\x02i8\x18\x02 \x01(\x05H\x00\x12\r\n\x03i16\x18\x03 \x01(\x05H\x00\x12\r\n\x03i32\x18\x05 \x01(\x05H\x00\x12\r\n\x03i64\x18\x07 \x01(\x03H\x00\x12\x0e\n\x04\x66p32\x18\n \x01(\x02H\x00\x12\x0e\n\x04\x66p64\x18\x0b \x01(\x01H\x00\x12\x10\n\x06string\x18\x0c \x01(\tH\x00\x12\x10\n\x06\x62inary\x18\r \x01(\x0cH\x00\x12\x13\n\ttimestamp\x18\x0e \x01(\x03H\x00\x12\x0e\n\x04\x64\x61te\x18\x10 \x01(\x05H\x00\x12\x0e\n\x04time\x18\x11 \x01(\x03H\x00\x12I\n\x16interval_year_to_month\x18\x13 \x01(\x0b\x32\'.Expression.Literal.IntervalYearToMonthH\x00\x12I\n\x16interval_day_to_second\x18\x14 \x01(\x0b\x32\'.Expression.Literal.IntervalDayToSecondH\x00\x12\x14\n\nfixed_char\x18\x15 \x01(\tH\x00\x12/\n\x08var_char\x18\x16 \x01(\x0b\x32\x1b.Expression.Literal.VarCharH\x00\x12\x16\n\x0c\x66ixed_binary\x18\x17 \x01(\x0cH\x00\x12.\n\x07\x64\x65\x63imal\x18\x18 \x01(\x0b\x32\x1b.Expression.Literal.DecimalH\x00\x12,\n\x06struct\x18\x19 \x01(\x0b\x32\x1a.Expression.Literal.StructH\x00\x12&\n\x03map\x18\x1a \x01(\x0b\x32\x17.Expression.Literal.MapH\x00\x12\x16\n\x0ctimestamp_tz\x18\x1b \x01(\x03H\x00\x12\x0e\n\x04uuid\x18\x1c \x01(\x0cH\x00\x12\x15\n\x04null\x18\x1d \x01(\x0b\x32\x05.TypeH\x00\x12(\n\x04list\x18\x1e \x01(\x0b\x32\x18.Expression.Literal.ListH\x00\x12 \n\nempty_list\x18\x1f \x01(\x0b\x32\n.Type.ListH\x00\x12\x1e\n\tempty_map\x18  \x01(\x0b\x32\t.Type.MapH\x00\x12\x37\n\x0cuser_defined\x18! \x01(\x0b\x32\x1f.Expression.Literal.UserDefinedH\x00\x12\x10\n\x08nullable\x18\x32 \x01(\x08\x12 \n\x18type_variation_reference\x18\x33 \x01(\r\x1a(\n\x07VarChar\x12\r\n\x05value\x18\x01 \x01(\t\x12\x0e\n\x06length\x18\x02 \x01(\r\x1a:\n\x07\x44\x65\x63imal\x12\r\n\x05value\x18\x01 \x01(\x0c\x12\x11\n\tprecision\x18\x02 \x01(\x05\x12\r\n\x05scale\x18\x03 \x01(\x05\x1a\x8d\x01\n\x03Map\x12\x34\n\nkey_values\x18\x01 \x03(\x0b\x32 .Expression.Literal.Map.KeyValue\x1aP\n\x08KeyValue\x12 \n\x03key\x18\x01 \x01(\x0b\x32\x13.Expression.Literal\x12\"\n\x05value\x18\x02 \x01(\x0b\x32\x13.Expression.Literal\x1a\x34\n\x13IntervalYearToMonth\x12\r\n\x05years\x18\x01 \x01(\x05\x12\x0e\n\x06months\x18\x02 \x01(\x05\x1aJ\n\x13IntervalDayToSecond\x12\x0c\n\x04\x64\x61ys\x18\x01 \x01(\x05\x12\x0f\n\x07seconds\x18\x02 \x01(\x05\x12\x14\n\x0cmicroseconds\x18\x03 \x01(\x05\x1a-\n\x06Struct\x12#\n\x06\x66ields\x18\x01 \x03(\x0b\x32\x13.Expression.Literal\x1a+\n\x04List\x12#\n\x06values\x18\x01 \x03(\x0b\x32\x13.Expression.Literal\x1aJ\n\x0bUserDefined\x12\x16\n\x0etype_reference\x18\x01 \x01(\r\x12#\n\x05value\x18\x02 \x01(\x0b\x32\x14.google.protobuf.AnyB\x0e\n\x0cliteral_type\x1a$\n\x13UnresolvedAttribute\x12\r\n\x05parts\x18\x01 \x03(\t\x1a\x43\n\x12UnresolvedFunction\x12\r\n\x05parts\x18\x01 \x03(\t\x12\x1e\n\targuments\x18\x02 \x03(\x0b\x32\x0b.Expression\x1a&\n\x10\x45xpressionString\x12\x12\n\nexpression\x18\x01 \x01(\tB\x0b\n\texpr_type\"\x90\x01\n\x07Request\x12\x11\n\tclient_id\x18\x01 \x01(\t\x12*\n\x0cuser_context\x18\x02 \x01(\x0b\x32\x14.Request.UserContext\x12\x13\n\x04plan\x18\x03 \x01(\x0b\x32\x05.Plan\x1a\x31\n\x0bUserContext\x12\x0f\n\x07user_id\x18\x01 \x01(\t\x12\x11\n\tuser_name\x18\x02 \x01(\t\"\xc2\x04\n\x08Response\x12\x11\n\tclient_id\x18\x01 \x01(\t\x12#\n\x05\x62\x61tch\x18\x02 \x01(\x0b\x32\x14.Response.ArrowBatch\x12\"\n\x07metrics\x18\x03 \x01(\x0b\x32\x11.Response.Metrics\x1as\n\nArrowBatch\x12\x11\n\trow_count\x18\x01 \x01(\x03\x12\x1a\n\x12uncompressed_bytes\x18\x02 \x01(\x03\x12\x18\n\x10\x63ompressed_bytes\x18\x03 \x01(\x03\x12\x0c\n\x04\x64\x61ta\x18\x04 \x01(\x0c\x12\x0e\n\x06schema\x18\x05 \x01(\x0c\x1a\xe4\x02\n\x07Metrics\x12/\n\x07metrics\x18\x01 \x03(\x0b\x32\x1e.Response.Metrics.MetricObject\x1a\xe6\x01\n\x0cMetricObject\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0f\n\x07plan_id\x18\x02 \x01(\x03\x12\x0e\n\x06parent\x18\x03 \x01(\x03\x12O\n\x11\x65xecution_metrics\x18\x04 \x03(\x0b\x32\x34.Response.Metrics.MetricObject.ExecutionMetricsEntry\x1aV\n\x15\x45xecutionMetricsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12,\n\x05value\x18\x02 \x01(\x0b\x32\x1d.Response.Metrics.MetricValue:\x02\x38\x01\x1a?\n\x0bMetricValue\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x03\x12\x13\n\x0bmetric_type\x18\x03 \x01(\t\"P\n\x0f\x41nalyzeResponse\x12\x11\n\tclient_id\x18\x01 \x01(\t\x12\x14\n\x0c\x63olumn_names\x18\x02 \x03(\t\x12\x14\n\x0c\x63olumn_types\x18\x03 \x03(\t2j\n\x13SparkConnectService\x12&\n\x0b\x45xecutePlan\x12\x08.Request\x1a\t.Response\"\x00\x30\x01\x12+\n\x0b\x41nalyzePlan\x12\x08.Request\x1a\x10.AnalyzeResponse\"\x00\x42%\n!org.apache.spark.connect.protobufP\x01\x62\x06proto3')



_TYPE = DESCRIPTOR.message_types_by_name['Type']
_TYPE_BOOLEAN = _TYPE.nested_types_by_name['Boolean']
_TYPE_I8 = _TYPE.nested_types_by_name['I8']
_TYPE_I16 = _TYPE.nested_types_by_name['I16']
_TYPE_I32 = _TYPE.nested_types_by_name['I32']
_TYPE_I64 = _TYPE.nested_types_by_name['I64']
_TYPE_FP32 = _TYPE.nested_types_by_name['FP32']
_TYPE_FP64 = _TYPE.nested_types_by_name['FP64']
_TYPE_STRING = _TYPE.nested_types_by_name['String']
_TYPE_BINARY = _TYPE.nested_types_by_name['Binary']
_TYPE_TIMESTAMP = _TYPE.nested_types_by_name['Timestamp']
_TYPE_DATE = _TYPE.nested_types_by_name['Date']
_TYPE_TIME = _TYPE.nested_types_by_name['Time']
_TYPE_TIMESTAMPTZ = _TYPE.nested_types_by_name['TimestampTZ']
_TYPE_INTERVALYEAR = _TYPE.nested_types_by_name['IntervalYear']
_TYPE_INTERVALDAY = _TYPE.nested_types_by_name['IntervalDay']
_TYPE_UUID = _TYPE.nested_types_by_name['UUID']
_TYPE_FIXEDCHAR = _TYPE.nested_types_by_name['FixedChar']
_TYPE_VARCHAR = _TYPE.nested_types_by_name['VarChar']
_TYPE_FIXEDBINARY = _TYPE.nested_types_by_name['FixedBinary']
_TYPE_DECIMAL = _TYPE.nested_types_by_name['Decimal']
_TYPE_STRUCT = _TYPE.nested_types_by_name['Struct']
_TYPE_LIST = _TYPE.nested_types_by_name['List']
_TYPE_MAP = _TYPE.nested_types_by_name['Map']
_PLAN = DESCRIPTOR.message_types_by_name['Plan']
_COMMAND = DESCRIPTOR.message_types_by_name['Command']
_CREATESCALARFUNCTION = DESCRIPTOR.message_types_by_name['CreateScalarFunction']
_RELATION = DESCRIPTOR.message_types_by_name['Relation']
_RELATIONCOMMON = DESCRIPTOR.message_types_by_name['RelationCommon']
_SQL = DESCRIPTOR.message_types_by_name['Sql']
_READ = DESCRIPTOR.message_types_by_name['Read']
_READ_NAMEDTABLE = _READ.nested_types_by_name['NamedTable']
_PROJECT = DESCRIPTOR.message_types_by_name['Project']
_FILTER = DESCRIPTOR.message_types_by_name['Filter']
_JOIN = DESCRIPTOR.message_types_by_name['Join']
_UNION = DESCRIPTOR.message_types_by_name['Union']
_FETCH = DESCRIPTOR.message_types_by_name['Fetch']
_AGGREGATE = DESCRIPTOR.message_types_by_name['Aggregate']
_AGGREGATE_GROUPINGSET = _AGGREGATE.nested_types_by_name['GroupingSet']
_AGGREGATE_MEASURE = _AGGREGATE.nested_types_by_name['Measure']
_AGGREGATE_AGGREGATEFUNCTION = _AGGREGATE.nested_types_by_name['AggregateFunction']
_SORT = DESCRIPTOR.message_types_by_name['Sort']
_SORT_SORTFIELD = _SORT.nested_types_by_name['SortField']
_EXPRESSION = DESCRIPTOR.message_types_by_name['Expression']
_EXPRESSION_LITERAL = _EXPRESSION.nested_types_by_name['Literal']
_EXPRESSION_LITERAL_VARCHAR = _EXPRESSION_LITERAL.nested_types_by_name['VarChar']
_EXPRESSION_LITERAL_DECIMAL = _EXPRESSION_LITERAL.nested_types_by_name['Decimal']
_EXPRESSION_LITERAL_MAP = _EXPRESSION_LITERAL.nested_types_by_name['Map']
_EXPRESSION_LITERAL_MAP_KEYVALUE = _EXPRESSION_LITERAL_MAP.nested_types_by_name['KeyValue']
_EXPRESSION_LITERAL_INTERVALYEARTOMONTH = _EXPRESSION_LITERAL.nested_types_by_name['IntervalYearToMonth']
_EXPRESSION_LITERAL_INTERVALDAYTOSECOND = _EXPRESSION_LITERAL.nested_types_by_name['IntervalDayToSecond']
_EXPRESSION_LITERAL_STRUCT = _EXPRESSION_LITERAL.nested_types_by_name['Struct']
_EXPRESSION_LITERAL_LIST = _EXPRESSION_LITERAL.nested_types_by_name['List']
_EXPRESSION_LITERAL_USERDEFINED = _EXPRESSION_LITERAL.nested_types_by_name['UserDefined']
_EXPRESSION_UNRESOLVEDATTRIBUTE = _EXPRESSION.nested_types_by_name['UnresolvedAttribute']
_EXPRESSION_UNRESOLVEDFUNCTION = _EXPRESSION.nested_types_by_name['UnresolvedFunction']
_EXPRESSION_EXPRESSIONSTRING = _EXPRESSION.nested_types_by_name['ExpressionString']
_REQUEST = DESCRIPTOR.message_types_by_name['Request']
_REQUEST_USERCONTEXT = _REQUEST.nested_types_by_name['UserContext']
_RESPONSE = DESCRIPTOR.message_types_by_name['Response']
_RESPONSE_ARROWBATCH = _RESPONSE.nested_types_by_name['ArrowBatch']
_RESPONSE_METRICS = _RESPONSE.nested_types_by_name['Metrics']
_RESPONSE_METRICS_METRICOBJECT = _RESPONSE_METRICS.nested_types_by_name['MetricObject']
_RESPONSE_METRICS_METRICOBJECT_EXECUTIONMETRICSENTRY = _RESPONSE_METRICS_METRICOBJECT.nested_types_by_name['ExecutionMetricsEntry']
_RESPONSE_METRICS_METRICVALUE = _RESPONSE_METRICS.nested_types_by_name['MetricValue']
_ANALYZERESPONSE = DESCRIPTOR.message_types_by_name['AnalyzeResponse']
_TYPE_NULLABILITY = _TYPE.enum_types_by_name['Nullability']
_CREATESCALARFUNCTION_FUNCTIONLANGUAGE = _CREATESCALARFUNCTION.enum_types_by_name['FunctionLanguage']
_JOIN_JOINTYPE = _JOIN.enum_types_by_name['JoinType']
_UNION_UNIONTYPE = _UNION.enum_types_by_name['UnionType']
_SORT_SORTDIRECTION = _SORT.enum_types_by_name['SortDirection']
_SORT_SORTNULLS = _SORT.enum_types_by_name['SortNulls']
Type = _reflection.GeneratedProtocolMessageType('Type', (_message.Message,), {

  'Boolean' : _reflection.GeneratedProtocolMessageType('Boolean', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_BOOLEAN,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.Boolean)
    })
  ,

  'I8' : _reflection.GeneratedProtocolMessageType('I8', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_I8,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.I8)
    })
  ,

  'I16' : _reflection.GeneratedProtocolMessageType('I16', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_I16,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.I16)
    })
  ,

  'I32' : _reflection.GeneratedProtocolMessageType('I32', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_I32,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.I32)
    })
  ,

  'I64' : _reflection.GeneratedProtocolMessageType('I64', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_I64,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.I64)
    })
  ,

  'FP32' : _reflection.GeneratedProtocolMessageType('FP32', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_FP32,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.FP32)
    })
  ,

  'FP64' : _reflection.GeneratedProtocolMessageType('FP64', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_FP64,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.FP64)
    })
  ,

  'String' : _reflection.GeneratedProtocolMessageType('String', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_STRING,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.String)
    })
  ,

  'Binary' : _reflection.GeneratedProtocolMessageType('Binary', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_BINARY,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.Binary)
    })
  ,

  'Timestamp' : _reflection.GeneratedProtocolMessageType('Timestamp', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_TIMESTAMP,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.Timestamp)
    })
  ,

  'Date' : _reflection.GeneratedProtocolMessageType('Date', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_DATE,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.Date)
    })
  ,

  'Time' : _reflection.GeneratedProtocolMessageType('Time', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_TIME,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.Time)
    })
  ,

  'TimestampTZ' : _reflection.GeneratedProtocolMessageType('TimestampTZ', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_TIMESTAMPTZ,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.TimestampTZ)
    })
  ,

  'IntervalYear' : _reflection.GeneratedProtocolMessageType('IntervalYear', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_INTERVALYEAR,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.IntervalYear)
    })
  ,

  'IntervalDay' : _reflection.GeneratedProtocolMessageType('IntervalDay', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_INTERVALDAY,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.IntervalDay)
    })
  ,

  'UUID' : _reflection.GeneratedProtocolMessageType('UUID', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_UUID,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.UUID)
    })
  ,

  'FixedChar' : _reflection.GeneratedProtocolMessageType('FixedChar', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_FIXEDCHAR,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.FixedChar)
    })
  ,

  'VarChar' : _reflection.GeneratedProtocolMessageType('VarChar', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_VARCHAR,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.VarChar)
    })
  ,

  'FixedBinary' : _reflection.GeneratedProtocolMessageType('FixedBinary', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_FIXEDBINARY,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.FixedBinary)
    })
  ,

  'Decimal' : _reflection.GeneratedProtocolMessageType('Decimal', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_DECIMAL,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.Decimal)
    })
  ,

  'Struct' : _reflection.GeneratedProtocolMessageType('Struct', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_STRUCT,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.Struct)
    })
  ,

  'List' : _reflection.GeneratedProtocolMessageType('List', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_LIST,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.List)
    })
  ,

  'Map' : _reflection.GeneratedProtocolMessageType('Map', (_message.Message,), {
    'DESCRIPTOR' : _TYPE_MAP,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Type.Map)
    })
  ,
  'DESCRIPTOR' : _TYPE,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Type)
  })
_sym_db.RegisterMessage(Type)
_sym_db.RegisterMessage(Type.Boolean)
_sym_db.RegisterMessage(Type.I8)
_sym_db.RegisterMessage(Type.I16)
_sym_db.RegisterMessage(Type.I32)
_sym_db.RegisterMessage(Type.I64)
_sym_db.RegisterMessage(Type.FP32)
_sym_db.RegisterMessage(Type.FP64)
_sym_db.RegisterMessage(Type.String)
_sym_db.RegisterMessage(Type.Binary)
_sym_db.RegisterMessage(Type.Timestamp)
_sym_db.RegisterMessage(Type.Date)
_sym_db.RegisterMessage(Type.Time)
_sym_db.RegisterMessage(Type.TimestampTZ)
_sym_db.RegisterMessage(Type.IntervalYear)
_sym_db.RegisterMessage(Type.IntervalDay)
_sym_db.RegisterMessage(Type.UUID)
_sym_db.RegisterMessage(Type.FixedChar)
_sym_db.RegisterMessage(Type.VarChar)
_sym_db.RegisterMessage(Type.FixedBinary)
_sym_db.RegisterMessage(Type.Decimal)
_sym_db.RegisterMessage(Type.Struct)
_sym_db.RegisterMessage(Type.List)
_sym_db.RegisterMessage(Type.Map)

Plan = _reflection.GeneratedProtocolMessageType('Plan', (_message.Message,), {
  'DESCRIPTOR' : _PLAN,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Plan)
  })
_sym_db.RegisterMessage(Plan)

Command = _reflection.GeneratedProtocolMessageType('Command', (_message.Message,), {
  'DESCRIPTOR' : _COMMAND,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Command)
  })
_sym_db.RegisterMessage(Command)

CreateScalarFunction = _reflection.GeneratedProtocolMessageType('CreateScalarFunction', (_message.Message,), {
  'DESCRIPTOR' : _CREATESCALARFUNCTION,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:CreateScalarFunction)
  })
_sym_db.RegisterMessage(CreateScalarFunction)

Relation = _reflection.GeneratedProtocolMessageType('Relation', (_message.Message,), {
  'DESCRIPTOR' : _RELATION,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Relation)
  })
_sym_db.RegisterMessage(Relation)

RelationCommon = _reflection.GeneratedProtocolMessageType('RelationCommon', (_message.Message,), {
  'DESCRIPTOR' : _RELATIONCOMMON,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:RelationCommon)
  })
_sym_db.RegisterMessage(RelationCommon)

Sql = _reflection.GeneratedProtocolMessageType('Sql', (_message.Message,), {
  'DESCRIPTOR' : _SQL,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Sql)
  })
_sym_db.RegisterMessage(Sql)

Read = _reflection.GeneratedProtocolMessageType('Read', (_message.Message,), {

  'NamedTable' : _reflection.GeneratedProtocolMessageType('NamedTable', (_message.Message,), {
    'DESCRIPTOR' : _READ_NAMEDTABLE,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Read.NamedTable)
    })
  ,
  'DESCRIPTOR' : _READ,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Read)
  })
_sym_db.RegisterMessage(Read)
_sym_db.RegisterMessage(Read.NamedTable)

Project = _reflection.GeneratedProtocolMessageType('Project', (_message.Message,), {
  'DESCRIPTOR' : _PROJECT,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Project)
  })
_sym_db.RegisterMessage(Project)

Filter = _reflection.GeneratedProtocolMessageType('Filter', (_message.Message,), {
  'DESCRIPTOR' : _FILTER,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Filter)
  })
_sym_db.RegisterMessage(Filter)

Join = _reflection.GeneratedProtocolMessageType('Join', (_message.Message,), {
  'DESCRIPTOR' : _JOIN,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Join)
  })
_sym_db.RegisterMessage(Join)

Union = _reflection.GeneratedProtocolMessageType('Union', (_message.Message,), {
  'DESCRIPTOR' : _UNION,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Union)
  })
_sym_db.RegisterMessage(Union)

Fetch = _reflection.GeneratedProtocolMessageType('Fetch', (_message.Message,), {
  'DESCRIPTOR' : _FETCH,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Fetch)
  })
_sym_db.RegisterMessage(Fetch)

Aggregate = _reflection.GeneratedProtocolMessageType('Aggregate', (_message.Message,), {

  'GroupingSet' : _reflection.GeneratedProtocolMessageType('GroupingSet', (_message.Message,), {
    'DESCRIPTOR' : _AGGREGATE_GROUPINGSET,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Aggregate.GroupingSet)
    })
  ,

  'Measure' : _reflection.GeneratedProtocolMessageType('Measure', (_message.Message,), {
    'DESCRIPTOR' : _AGGREGATE_MEASURE,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Aggregate.Measure)
    })
  ,

  'AggregateFunction' : _reflection.GeneratedProtocolMessageType('AggregateFunction', (_message.Message,), {
    'DESCRIPTOR' : _AGGREGATE_AGGREGATEFUNCTION,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Aggregate.AggregateFunction)
    })
  ,
  'DESCRIPTOR' : _AGGREGATE,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Aggregate)
  })
_sym_db.RegisterMessage(Aggregate)
_sym_db.RegisterMessage(Aggregate.GroupingSet)
_sym_db.RegisterMessage(Aggregate.Measure)
_sym_db.RegisterMessage(Aggregate.AggregateFunction)

Sort = _reflection.GeneratedProtocolMessageType('Sort', (_message.Message,), {

  'SortField' : _reflection.GeneratedProtocolMessageType('SortField', (_message.Message,), {
    'DESCRIPTOR' : _SORT_SORTFIELD,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Sort.SortField)
    })
  ,
  'DESCRIPTOR' : _SORT,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Sort)
  })
_sym_db.RegisterMessage(Sort)
_sym_db.RegisterMessage(Sort.SortField)

Expression = _reflection.GeneratedProtocolMessageType('Expression', (_message.Message,), {

  'Literal' : _reflection.GeneratedProtocolMessageType('Literal', (_message.Message,), {

    'VarChar' : _reflection.GeneratedProtocolMessageType('VarChar', (_message.Message,), {
      'DESCRIPTOR' : _EXPRESSION_LITERAL_VARCHAR,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Expression.Literal.VarChar)
      })
    ,

    'Decimal' : _reflection.GeneratedProtocolMessageType('Decimal', (_message.Message,), {
      'DESCRIPTOR' : _EXPRESSION_LITERAL_DECIMAL,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Expression.Literal.Decimal)
      })
    ,

    'Map' : _reflection.GeneratedProtocolMessageType('Map', (_message.Message,), {

      'KeyValue' : _reflection.GeneratedProtocolMessageType('KeyValue', (_message.Message,), {
        'DESCRIPTOR' : _EXPRESSION_LITERAL_MAP_KEYVALUE,
        '__module__' : 'spark_connect_pb2'
        # @@protoc_insertion_point(class_scope:Expression.Literal.Map.KeyValue)
        })
      ,
      'DESCRIPTOR' : _EXPRESSION_LITERAL_MAP,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Expression.Literal.Map)
      })
    ,

    'IntervalYearToMonth' : _reflection.GeneratedProtocolMessageType('IntervalYearToMonth', (_message.Message,), {
      'DESCRIPTOR' : _EXPRESSION_LITERAL_INTERVALYEARTOMONTH,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Expression.Literal.IntervalYearToMonth)
      })
    ,

    'IntervalDayToSecond' : _reflection.GeneratedProtocolMessageType('IntervalDayToSecond', (_message.Message,), {
      'DESCRIPTOR' : _EXPRESSION_LITERAL_INTERVALDAYTOSECOND,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Expression.Literal.IntervalDayToSecond)
      })
    ,

    'Struct' : _reflection.GeneratedProtocolMessageType('Struct', (_message.Message,), {
      'DESCRIPTOR' : _EXPRESSION_LITERAL_STRUCT,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Expression.Literal.Struct)
      })
    ,

    'List' : _reflection.GeneratedProtocolMessageType('List', (_message.Message,), {
      'DESCRIPTOR' : _EXPRESSION_LITERAL_LIST,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Expression.Literal.List)
      })
    ,

    'UserDefined' : _reflection.GeneratedProtocolMessageType('UserDefined', (_message.Message,), {
      'DESCRIPTOR' : _EXPRESSION_LITERAL_USERDEFINED,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Expression.Literal.UserDefined)
      })
    ,
    'DESCRIPTOR' : _EXPRESSION_LITERAL,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Expression.Literal)
    })
  ,

  'UnresolvedAttribute' : _reflection.GeneratedProtocolMessageType('UnresolvedAttribute', (_message.Message,), {
    'DESCRIPTOR' : _EXPRESSION_UNRESOLVEDATTRIBUTE,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Expression.UnresolvedAttribute)
    })
  ,

  'UnresolvedFunction' : _reflection.GeneratedProtocolMessageType('UnresolvedFunction', (_message.Message,), {
    'DESCRIPTOR' : _EXPRESSION_UNRESOLVEDFUNCTION,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Expression.UnresolvedFunction)
    })
  ,

  'ExpressionString' : _reflection.GeneratedProtocolMessageType('ExpressionString', (_message.Message,), {
    'DESCRIPTOR' : _EXPRESSION_EXPRESSIONSTRING,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Expression.ExpressionString)
    })
  ,
  'DESCRIPTOR' : _EXPRESSION,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Expression)
  })
_sym_db.RegisterMessage(Expression)
_sym_db.RegisterMessage(Expression.Literal)
_sym_db.RegisterMessage(Expression.Literal.VarChar)
_sym_db.RegisterMessage(Expression.Literal.Decimal)
_sym_db.RegisterMessage(Expression.Literal.Map)
_sym_db.RegisterMessage(Expression.Literal.Map.KeyValue)
_sym_db.RegisterMessage(Expression.Literal.IntervalYearToMonth)
_sym_db.RegisterMessage(Expression.Literal.IntervalDayToSecond)
_sym_db.RegisterMessage(Expression.Literal.Struct)
_sym_db.RegisterMessage(Expression.Literal.List)
_sym_db.RegisterMessage(Expression.Literal.UserDefined)
_sym_db.RegisterMessage(Expression.UnresolvedAttribute)
_sym_db.RegisterMessage(Expression.UnresolvedFunction)
_sym_db.RegisterMessage(Expression.ExpressionString)

Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), {

  'UserContext' : _reflection.GeneratedProtocolMessageType('UserContext', (_message.Message,), {
    'DESCRIPTOR' : _REQUEST_USERCONTEXT,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Request.UserContext)
    })
  ,
  'DESCRIPTOR' : _REQUEST,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Request)
  })
_sym_db.RegisterMessage(Request)
_sym_db.RegisterMessage(Request.UserContext)

Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), {

  'ArrowBatch' : _reflection.GeneratedProtocolMessageType('ArrowBatch', (_message.Message,), {
    'DESCRIPTOR' : _RESPONSE_ARROWBATCH,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Response.ArrowBatch)
    })
  ,

  'Metrics' : _reflection.GeneratedProtocolMessageType('Metrics', (_message.Message,), {

    'MetricObject' : _reflection.GeneratedProtocolMessageType('MetricObject', (_message.Message,), {

      'ExecutionMetricsEntry' : _reflection.GeneratedProtocolMessageType('ExecutionMetricsEntry', (_message.Message,), {
        'DESCRIPTOR' : _RESPONSE_METRICS_METRICOBJECT_EXECUTIONMETRICSENTRY,
        '__module__' : 'spark_connect_pb2'
        # @@protoc_insertion_point(class_scope:Response.Metrics.MetricObject.ExecutionMetricsEntry)
        })
      ,
      'DESCRIPTOR' : _RESPONSE_METRICS_METRICOBJECT,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Response.Metrics.MetricObject)
      })
    ,

    'MetricValue' : _reflection.GeneratedProtocolMessageType('MetricValue', (_message.Message,), {
      'DESCRIPTOR' : _RESPONSE_METRICS_METRICVALUE,
      '__module__' : 'spark_connect_pb2'
      # @@protoc_insertion_point(class_scope:Response.Metrics.MetricValue)
      })
    ,
    'DESCRIPTOR' : _RESPONSE_METRICS,
    '__module__' : 'spark_connect_pb2'
    # @@protoc_insertion_point(class_scope:Response.Metrics)
    })
  ,
  'DESCRIPTOR' : _RESPONSE,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:Response)
  })
_sym_db.RegisterMessage(Response)
_sym_db.RegisterMessage(Response.ArrowBatch)
_sym_db.RegisterMessage(Response.Metrics)
_sym_db.RegisterMessage(Response.Metrics.MetricObject)
_sym_db.RegisterMessage(Response.Metrics.MetricObject.ExecutionMetricsEntry)
_sym_db.RegisterMessage(Response.Metrics.MetricValue)

AnalyzeResponse = _reflection.GeneratedProtocolMessageType('AnalyzeResponse', (_message.Message,), {
  'DESCRIPTOR' : _ANALYZERESPONSE,
  '__module__' : 'spark_connect_pb2'
  # @@protoc_insertion_point(class_scope:AnalyzeResponse)
  })
_sym_db.RegisterMessage(AnalyzeResponse)

_SPARKCONNECTSERVICE = DESCRIPTOR.services_by_name['SparkConnectService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n!org.apache.spark.connect.protobufP\001'
  _RESPONSE_METRICS_METRICOBJECT_EXECUTIONMETRICSENTRY._options = None
  _RESPONSE_METRICS_METRICOBJECT_EXECUTIONMETRICSENTRY._serialized_options = b'8\001'
  _TYPE._serialized_start=80
  _TYPE._serialized_end=3072
  _TYPE_BOOLEAN._serialized_start=869
  _TYPE_BOOLEAN._serialized_end=952
  _TYPE_I8._serialized_start=954
  _TYPE_I8._serialized_end=1032
  _TYPE_I16._serialized_start=1034
  _TYPE_I16._serialized_end=1113
  _TYPE_I32._serialized_start=1115
  _TYPE_I32._serialized_end=1194
  _TYPE_I64._serialized_start=1196
  _TYPE_I64._serialized_end=1275
  _TYPE_FP32._serialized_start=1277
  _TYPE_FP32._serialized_end=1357
  _TYPE_FP64._serialized_start=1359
  _TYPE_FP64._serialized_end=1439
  _TYPE_STRING._serialized_start=1441
  _TYPE_STRING._serialized_end=1523
  _TYPE_BINARY._serialized_start=1525
  _TYPE_BINARY._serialized_end=1607
  _TYPE_TIMESTAMP._serialized_start=1609
  _TYPE_TIMESTAMP._serialized_end=1694
  _TYPE_DATE._serialized_start=1696
  _TYPE_DATE._serialized_end=1776
  _TYPE_TIME._serialized_start=1778
  _TYPE_TIME._serialized_end=1858
  _TYPE_TIMESTAMPTZ._serialized_start=1860
  _TYPE_TIMESTAMPTZ._serialized_end=1947
  _TYPE_INTERVALYEAR._serialized_start=1949
  _TYPE_INTERVALYEAR._serialized_end=2037
  _TYPE_INTERVALDAY._serialized_start=2039
  _TYPE_INTERVALDAY._serialized_end=2126
  _TYPE_UUID._serialized_start=2128
  _TYPE_UUID._serialized_end=2208
  _TYPE_FIXEDCHAR._serialized_start=2210
  _TYPE_FIXEDCHAR._serialized_end=2311
  _TYPE_VARCHAR._serialized_start=2313
  _TYPE_VARCHAR._serialized_end=2412
  _TYPE_FIXEDBINARY._serialized_start=2414
  _TYPE_FIXEDBINARY._serialized_end=2517
  _TYPE_DECIMAL._serialized_start=2519
  _TYPE_DECIMAL._serialized_end=2636
  _TYPE_STRUCT._serialized_start=2638
  _TYPE_STRUCT._serialized_end=2742
  _TYPE_LIST._serialized_start=2744
  _TYPE_LIST._serialized_end=2845
  _TYPE_MAP._serialized_start=2847
  _TYPE_MAP._serialized_end=2968
  _TYPE_NULLABILITY._serialized_start=2970
  _TYPE_NULLABILITY._serialized_end=3064
  _PLAN._serialized_start=3074
  _PLAN._serialized_end=3147
  _COMMAND._serialized_start=3149
  _COMMAND._serialized_end=3224
  _CREATESCALARFUNCTION._serialized_start=3227
  _CREATESCALARFUNCTION._serialized_end=3547
  _CREATESCALARFUNCTION_FUNCTIONLANGUAGE._serialized_start=3459
  _CREATESCALARFUNCTION_FUNCTIONLANGUAGE._serialized_end=3524
  _RELATION._serialized_start=3550
  _RELATION._serialized_end=3834
  _RELATIONCOMMON._serialized_start=3836
  _RELATIONCOMMON._serialized_end=3888
  _SQL._serialized_start=3890
  _SQL._serialized_end=3910
  _READ._serialized_start=3912
  _READ._serialized_end=4001
  _READ_NAMEDTABLE._serialized_start=3961
  _READ_NAMEDTABLE._serialized_end=3988
  _PROJECT._serialized_start=4003
  _PROJECT._serialized_end=4072
  _FILTER._serialized_start=4074
  _FILTER._serialized_end=4140
  _JOIN._serialized_start=4143
  _JOIN._serialized_end=4374
  _JOIN_JOINTYPE._serialized_start=4256
  _JOIN_JOINTYPE._serialized_end=4374
  _UNION._serialized_start=4376
  _UNION._serialized_end=4496
  _UNION_UNIONTYPE._serialized_start=4450
  _UNION_UNIONTYPE._serialized_end=4496
  _FETCH._serialized_start=4498
  _FETCH._serialized_end=4562
  _AGGREGATE._serialized_start=4565
  _AGGREGATE._serialized_end=4901
  _AGGREGATE_GROUPINGSET._serialized_start=4689
  _AGGREGATE_GROUPINGSET._serialized_end=4746
  _AGGREGATE_MEASURE._serialized_start=4748
  _AGGREGATE_MEASURE._serialized_end=4834
  _AGGREGATE_AGGREGATEFUNCTION._serialized_start=4836
  _AGGREGATE_AGGREGATEFUNCTION._serialized_end=4901
  _SORT._serialized_start=4904
  _SORT._serialized_end=5196
  _SORT_SORTFIELD._serialized_start=4976
  _SORT_SORTFIELD._serialized_end=5092
  _SORT_SORTDIRECTION._serialized_start=5094
  _SORT_SORTDIRECTION._serialized_end=5150
  _SORT_SORTNULLS._serialized_start=5152
  _SORT_SORTNULLS._serialized_end=5196
  _EXPRESSION._serialized_start=5199
  _EXPRESSION._serialized_end=7028
  _EXPRESSION_LITERAL._serialized_start=5441
  _EXPRESSION_LITERAL._serialized_end=6868
  _EXPRESSION_LITERAL_VARCHAR._serialized_start=6310
  _EXPRESSION_LITERAL_VARCHAR._serialized_end=6350
  _EXPRESSION_LITERAL_DECIMAL._serialized_start=6352
  _EXPRESSION_LITERAL_DECIMAL._serialized_end=6410
  _EXPRESSION_LITERAL_MAP._serialized_start=6413
  _EXPRESSION_LITERAL_MAP._serialized_end=6554
  _EXPRESSION_LITERAL_MAP_KEYVALUE._serialized_start=6474
  _EXPRESSION_LITERAL_MAP_KEYVALUE._serialized_end=6554
  _EXPRESSION_LITERAL_INTERVALYEARTOMONTH._serialized_start=6556
  _EXPRESSION_LITERAL_INTERVALYEARTOMONTH._serialized_end=6608
  _EXPRESSION_LITERAL_INTERVALDAYTOSECOND._serialized_start=6610
  _EXPRESSION_LITERAL_INTERVALDAYTOSECOND._serialized_end=6684
  _EXPRESSION_LITERAL_STRUCT._serialized_start=6686
  _EXPRESSION_LITERAL_STRUCT._serialized_end=6731
  _EXPRESSION_LITERAL_LIST._serialized_start=6733
  _EXPRESSION_LITERAL_LIST._serialized_end=6776
  _EXPRESSION_LITERAL_USERDEFINED._serialized_start=6778
  _EXPRESSION_LITERAL_USERDEFINED._serialized_end=6852
  _EXPRESSION_UNRESOLVEDATTRIBUTE._serialized_start=6870
  _EXPRESSION_UNRESOLVEDATTRIBUTE._serialized_end=6906
  _EXPRESSION_UNRESOLVEDFUNCTION._serialized_start=6908
  _EXPRESSION_UNRESOLVEDFUNCTION._serialized_end=6975
  _EXPRESSION_EXPRESSIONSTRING._serialized_start=6977
  _EXPRESSION_EXPRESSIONSTRING._serialized_end=7015
  _REQUEST._serialized_start=7031
  _REQUEST._serialized_end=7175
  _REQUEST_USERCONTEXT._serialized_start=7126
  _REQUEST_USERCONTEXT._serialized_end=7175
  _RESPONSE._serialized_start=7178
  _RESPONSE._serialized_end=7756
  _RESPONSE_ARROWBATCH._serialized_start=7282
  _RESPONSE_ARROWBATCH._serialized_end=7397
  _RESPONSE_METRICS._serialized_start=7400
  _RESPONSE_METRICS._serialized_end=7756
  _RESPONSE_METRICS_METRICOBJECT._serialized_start=7461
  _RESPONSE_METRICS_METRICOBJECT._serialized_end=7691
  _RESPONSE_METRICS_METRICOBJECT_EXECUTIONMETRICSENTRY._serialized_start=7605
  _RESPONSE_METRICS_METRICOBJECT_EXECUTIONMETRICSENTRY._serialized_end=7691
  _RESPONSE_METRICS_METRICVALUE._serialized_start=7693
  _RESPONSE_METRICS_METRICVALUE._serialized_end=7756
  _ANALYZERESPONSE._serialized_start=7758
  _ANALYZERESPONSE._serialized_end=7838
  _SPARKCONNECTSERVICE._serialized_start=7840
  _SPARKCONNECTSERVICE._serialized_end=7946
# @@protoc_insertion_point(module_scope)
