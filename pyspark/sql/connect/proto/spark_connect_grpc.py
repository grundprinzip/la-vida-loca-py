# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: spark_connect.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.any_pb2
import google.protobuf.empty_pb2
import pyspark.sql.connect.proto.spark_connect_pb2 as spark_connect_pb2


class SparkConnectServiceBase(abc.ABC):

    @abc.abstractmethod
    async def ExecutePlan(self, stream: 'grpclib.server.Stream[spark_connect_pb2.Request, spark_connect_pb2.Response]') -> None:
        pass

    @abc.abstractmethod
    async def AnalyzePlan(self, stream: 'grpclib.server.Stream[spark_connect_pb2.Request, spark_connect_pb2.AnalyzeResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/SparkConnectService/ExecutePlan': grpclib.const.Handler(
                self.ExecutePlan,
                grpclib.const.Cardinality.UNARY_STREAM,
                spark_connect_pb2.Request,
                spark_connect_pb2.Response,
            ),
            '/SparkConnectService/AnalyzePlan': grpclib.const.Handler(
                self.AnalyzePlan,
                grpclib.const.Cardinality.UNARY_UNARY,
                spark_connect_pb2.Request,
                spark_connect_pb2.AnalyzeResponse,
            ),
        }


class SparkConnectServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ExecutePlan = grpclib.client.UnaryStreamMethod(
            channel,
            '/SparkConnectService/ExecutePlan',
            spark_connect_pb2.Request,
            spark_connect_pb2.Response,
        )
        self.AnalyzePlan = grpclib.client.UnaryUnaryMethod(
            channel,
            '/SparkConnectService/AnalyzePlan',
            spark_connect_pb2.Request,
            spark_connect_pb2.AnalyzeResponse,
        )
